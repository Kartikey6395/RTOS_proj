## Q1.
    Find what is the task priority numbering for the RTOS you are using. eg. Higher the
    number higher the priority or vice-versa. Find the range of priority that can be assigned to 
    a task for your RTOS.
## A1.
    Task priority numbering is as such--Higher the number , Higher will be the priority.
    RANGE = 0 to configMAX_PRIOIRTIES-1

## Q2.
    What is the mechanism used to make a task periodic for the RTOS you are using? Write a
    program to make a task periodic with periodicity of 500ms.
## A2.
    vTaskDelay(time in ms / portTICK_PERIOD_MS)
    Delay functionality is used in a task to make it periodic
    (refer README) PROGRAMS NO== "3.task_dealy" & "4.task_delay_p2" 

## Q3.
    Find the APIs in your RTOS that provides timestamp and use it to print the periodic task.
    Observe the jitter in the timestamp vs the periodicity. Enhance the code to 10 periodic tasks
    with different periodicity. Futher observe the jitter in each of the task.
## A3.

## Q4.
    Create two task with priority 10 and 20. Each task prints its own custom message.
## A4
    (refer README) PROGRAM== 2.task_p

## Q5.
    Swap the priority and observe the changes in the output. What is your conclusion on the
    sequence of printing the messages.
## A5.
    On swapping the priorities of both tasks the Higher priority Task was executed and task with lower
    priority executes only when the Higher priority task goes into Wait state/blocked mode.

## Q6.
    What are the maximum number of tasks that can be created on the RTOS you are using?
    Is it limited by the RTOS design or underlying hardware resources or both.
## A6.
    Maximum no of tasks that can be executed depends on the RAM space as there is no definite number.
    RTOS specifies that at an instant only one task can be executed which has highest priority

## Q7.
    What is the scheduling algorithm used by your RTOS?
## A7.
    Scheduling algo is a procedure that scheduler follows to assign execution quant time to tasks that
    are in READY state to go into RUNNING state .ESP32 freeRTOS follows PRIORITY PREEMPTION Scheduling
    where higher priority task from ready queue is executed first

## Q8.
     List the customization options for creating a task for the RTOS you are using. eg. priority etc
## A8.
    customization options 
        -priority
        -stack depth
        -task handler
        -task name
        -pointer to task id
    
## Q9.
    Find the fields that are maintained in the Task Control Block / Process Control Block of the
    RTOS you are using.
## A9.
    Task Control Block =
                        Task state
                        Task id
                        Program Counter
                        General purpose Registers
                        priority
                        Stack pointer
                        Memory size
## Q10. 
    Draw a process or task state diagram for the RTOS you are using.

## Q11.
     What is the API for deleting a task? Write a program demonstrate this capability.
## A11.
    vTaskDelete( xTaskHandle)---delete task
    (refer README) PROGRAM No== 2.task_p

## Q12.
    What are the APIs provided by your RTOS for enabling and disabling the interrupts? Write
    a program to demonstrate this capability?
## A12. 
    portDISABLE_INTERRUPTS & portENABLE_INTERRUPTS

## Q13.
    Does your RTOS provide APIs to collect task statistics. If yes, list the statistics parameters
    that are collected and write a program to display the runtime task statistics?
## A13.
   [for all task] UBaseType_t uxTaskGetSystemState(
                       TaskStatus_t * const pxTaskStatusArray,
                       const UBaseType_t uxArraySize,
                       unsigned long * const pulTotalRunTime );
   [for single task] void vTaskGetInfo( TaskHandle_t xTask,
                   TaskStatus_t *pxTaskStatus,
                   BaseType_t xGetFreeStackSpace,
                   eTaskState eState );
    TaskStatus_t structure contains task name ,task priority ,task state ,run time consumed,
     task stack space.

## Q14.
     Find the tick frequency configuration for your RTOS.
## A14. Configuration for tick freq done in menuconfig by altering Hz vale which is set hz=100 default

## Q15.
     Create a task to suspend itself after 1200 ms and resume it from another task
## A15.
    (refer README) PROGRAM NO.7== Task_res_susp

## Q16.
     Write a RTOS application to demonstrate the use of changing priority
## A16.
    (refer README) PROGRAM NO.8 == change_priority

## Q17.
     If you RTOS supports idle task hooking, write a program to demonstrate it
## A17.
    (refer README) PROGRAM NO. 15== Idle_task

## Q18.
    Write a RTOS application to demonstrate the use of task to task communication using
    Queue management APIs. Also demonstrate blocking on a queue.
## A18.
    (refer README) PROGRAM NO.9== xQueue

## Q19.
     Write a RTOS application to demonstrate the effects of task priorities when sending to and
    receiving from a queue.
## A19
    (refer README) PROGRAM NO.10== xQueue_p2

## Q20.
     Write a RTOS application to demonstrate deferred interrupt processing using binary semaphores


## Q21.
     Write a RTOS application to demonstrate counting semaphores to synchronize a task
## A21. 
    (refer README) PROGRAM NO.11== Count_sema

## Q22.
     Write a RTOS application to demonstrate the usage of queues within an interrupt service
    routine
## A22.

## Q23.
     Write a RTOS application to manage resources using mutual exclusion
## A23.
    (refer README) PROGRAM NO.12== Task_mutex

## Q24.
    Write a RTOS application to demonstrate a priority inversion problem. If your RTOS sup-
    ports priority inheritance or priority ceiling, use it to solve the priority inversion problem.
## A24.

## Q25.
     Write a RTOS application to create a software timer that invokes a callback function every
     5 seconds.
## A25.
    (refer README) PROGRAM NO.13 == soft_timer